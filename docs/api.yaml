openapi: 3.0.2
servers:
  - url: /v1/
info:
  description: |-
    This documents the API for the New America Data Locker project.
  version: 1.0.0
  title: Data Locker
tags:
  - name: user
    description: User based operations
  - name: document
    description: Document based operations
  - name: collections
    description: Collection based operations
  - name: delegate
    description: Account Delegate based operations
paths:

  '/users/{userId}/documents':
    get:
      tags:
        - user
      summary: List documents owned by a user
      description: List documents owned by a user
      operationId: listUserDocuments
      parameters:
        - name: userId
          in: path
          description: ID of user to find documents for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add a new document
      description: Add a new document for a user
      operationId: addUserDocument
      parameters:
        - name: userId
          in: path
          description: ID of user to create document for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Create a new document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'
  '/users/{userId}':
    get:
      tags:
        - user
      summary: Get user
      description: Get user details
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to find
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
    patch:
      tags:
        - user
      summary: Patch User
      description: Edit user data.
      operationId: patchUser
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      requestBody:
        description: Patch user data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchUserData'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
  '/users/{userId}/accept-terms-and-register':
    post:
      tags:
        - user
      summary: Accept Terms and Register
      description: Accept application Terms of Use for a user with additional registration info
      operationId: acceptTermsAndRegister
      parameters:
        - name: userId
          in: path
          description: ID of current user
          required: true
          schema:
            type: string
      requestBody:
        description: Registration details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegistrationDetails'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
  '/users/{userId}/delegates':
    get:
      tags:
        - user
      summary: List delegated access
      description: List access delegated to and from a user
      operationId: listAccountDelegates
      parameters:
        - name: userId
          in: path
          description: ID of user to find delegated access items for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDelegatedAccessList'
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add delegated access
      description: Add delegated access to a user for current user
      operationId: addAccountDelegate
      parameters:
        - name: userId
          in: path
          description: ID of user to delegate access for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDelegatedAccess'
        '404':
          description: User not found
      requestBody:
        description: Create a new delegated access
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDelegatedAccessCreate'
      security:
        - datalocker_auth: []
  '/users/{userId}/collections':
    get:
      tags:
        - user
      summary: List collections owned by a user
      description: List collections owned by a user
      operationId: listUserCollections
      parameters:
        - name: userId
          in: path
          description: ID of user to find collections for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add a new collection
      description: Add a new collection for a user
      operationId: addUserCollection
      parameters:
        - name: userId
          in: path
          description: ID of user to create the collection for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Create a new collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'
  '/users/{userId}/collections/shared':
    get:
      tags:
        - user
      summary: List collections shared to user
      description: List collections shared to user
      operationId: listUserCollectionsShared
      parameters:
        - name: userId
          in: path
          description: ID of user to find accessible collections for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollectionList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
  '/users/{userId}/documents/shared':
    get:
      tags:
        - user
      summary: List documents shared by a user
      description: List documents shared by a user to the calling user
      operationId: listUserDocumentsShared
      parameters:
        - name: userId
          in: path
          description: ID of user who has shared documents to an agent
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SharedCollectionList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
  '/users/{userId}/activity':
    get:
      tags:
        - user
      summary: List activity for an account
      description: List audit activity in an account, limited to 50 most recent items.
      operationId: listAccountActivity
      parameters:
        - name: userId
          in: path
          description: ID of user to find collections for
          required: true
          schema:
            type: string
        - name: nextToken
          in: query
          description: The token to be used to fetch the next set of results
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActivityList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []

  '/documents/{documentId}':
    get:
      tags:
        - document
      summary: Find document by ID
      description: Returns a single document. This will be audited as a document view by the current user
      operationId: getDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid ID supplied
        '404':
          description: Document not found
      security:
        - datalocker_auth: []
    put:
      tags:
        - document
      summary: Updates an existing document
      description: ''
      operationId: updateDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of the document that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Completed, no content
        '400':
          description: Invalid input
      security:
        - datalocker_auth: []
      requestBody:
        description: Updates a document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUpdate'
    delete:
      tags:
        - document
      summary: Deletes a document
      description: ''
      operationId: deleteDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of Document to delete
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Document not found
      security:
        - datalocker_auth: []
  '/documents/{documentId}/files/{fileId}/download':
    get:
      tags:
        - document
      summary: File download information
      description: Get a presigned POST URL to download the specified file. This will be audited as a download by the end user.
      operationId: downloadDocumentFileById
      parameters:
        - name: documentId
          in: path
          description: ID of document
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: ID of file in the document
          required: true
          schema:
            type: string
        - name: disposition
          in: query
          description: Content Disposition for the file download. Will default to attachment if none given.
          required: false
          schema:
            $ref: '#/components/schemas/FileDownloadDispositionTypeEnum'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDownload'
        '400':
          description: Invalid ID supplied
        '404':
          description: Document or file not found
      security:
        - datalocker_auth: []

  '/collections/{collectionId}/grants':
    get:
      tags:
        - collections
      summary: Get access grants to collection
      description: Returns access grants for a single collection
      operationId: getGrantsByCollectionId
      parameters:
        - name: collectionId
          in: path
          description: ID of collection to find grants for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionGrantList'
        '400':
          description: Invalid ID supplied
        '404':
          description: Collection not found
      security:
        - datalocker_auth: []
  '/collections/{collectionId}/documents':
    get:
      tags:
        - collections
      summary: Get documents
      description: Get documents in a collection
      operationId: getCollectionDocuments
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
  '/collections/{collectionId}/documents/downloads':
    post:
      tags:
        - collections
      summary: Download Collection documents
      description: Download all documents in a collection
      operationId: downloadCollectionDocuments
      parameters:
        - name: collectionId
          in: path
          description: ID of collection to download documents for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsDownload'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Requests a new download to be created for this collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentsDownloadCreate'
  '/collections/{collectionId}':
    patch:
      tags:
        - collections
      summary: Patch collection status
      description: Update the status for a collection
      operationId: patchCollectionStatusById
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Payload of collection status patch
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionStatusPatch'
  '/collections/{collectionId}/documents/downloads/{downloadId}':
    get:
      tags:
        - collections
      summary: Collections download information
      description: Get information about a download for a collections documents
      operationId: getDownloadForCollectionDocuments
      parameters:
        - name: collectionId
          in: path
          description: ID of collection
          required: true
          schema:
            type: string
        - name: downloadId
          in: path
          description: ID of download
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentsDownload'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []

  '/delegates/{delegateId}':
    delete:
      tags:
        - delegate
      summary: Deletes a delegated users access
      description: ''
      operationId: deleteAccountDelegate
      parameters:
        - name: delegateId
          in: path
          description: ID of the User Delegated Access record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: User Delegated Access deleted
        '404':
          description: User Delegated Access not found
      security:
        - datalocker_auth: []
  '/delegates/{delegateId}/accept':
    post:
      tags:
        - delegate
      summary: Accept delegated access
      description: Accept delegated access to a users account for current user
      operationId: acceptDelegatedAccount
      parameters:
        - name: delegateId
          in: path
          description: ID of the User Delegated Access record
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDelegatedAccess'
        '404':
          description: User not found
      security:
        - datalocker_auth: []

components:
  schemas:
    Link:
      description: A HATEOS Link
      type: object
      required:
        - href
        - rel
        - type
      properties:
        href:
          type: string
          description: The web address (relative or absolute) for the linked resource
          example: 'https://my-doc-link.com'
        rel:
          type: string
          description: The relation this linked resource has to the resource it is attached to.
          example: 'parent'
        type:
          type: string
          description: The HTTP method to use to access the linked resource
          example: GET
        includeFormData:
          type: object
          description: Form data to include in the request
          additionalProperties:
            type: string
    Links:
      description: An array of Links
      type: array
      items:
        $ref: '#/components/schemas/Link'
    FileContentTypeEnum:
      description: The accepted content type for files
      type: string
      enum:
        - application/pdf
        - image/jpeg
        - image/png
        - image/tiff
      example: image/jpeg
    DocumentUpdate:
      description: Request data to update a document
      type: object
      properties:
        name:
          type: string
          description: Document name.
          example: Sam's SSN
        status:
          type: string
          description: Document status
          example: active
        description:
          type: string
          nullable: true
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
    DocumentCreate:
      description: Request data to create a document
      required:
        - name
        - files
      properties:
        name:
          type: string
          description: Document name (system or user provided)
          example: Sam's SSN
        status:
          type: string
          description: Document status
          example: active
        description:
          type: string
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
        files:
          type: array
          description: The files that are part of the document
          items:
            $ref: '#/components/schemas/DocumentCreateFile'
        isMultipageDocument:
          type: boolean
          description: Specify if the document to be created is a multi-page document
          example: true
      type: object
    DocumentCreateFile:
      description: Request data to create a file of a document
      required:
        - name
        - contentType
        - sha256Checksum
        - contentLength
      properties:
        name:
          type: string
          description: File original name
          example: IMG20200101.jpg
        contentType:
          $ref: '#/components/schemas/FileContentTypeEnum'
        sha256Checksum:
          type: string
          description: SHA256 Checksum of file content
        contentLength:
          type: number
          description: Content length in bytes of the file
      type: object
    DocumentList:
      description: A result containing a list of documents
      required:
        - documents
      properties:
        documents:
          type: array
          description: The documents list
          items:
            $ref: '#/components/schemas/DocumentListItem'
      type: object
    DocumentListItem:
      description: A listed document, deliberately minimal
      required:
        - id
        - name
        - status
        - createdDate
        - links
      properties:
        id:
          type: string
          description: The ID of the document
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: The human readable name of the document
          example: Letter of Employment
        status:
          type: string
          description: Document status
          example: active
        createdDate:
          type: string
          description: Date the document was created
          format: date-time
          example: '2020-01-01T01:01:01Z'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    DocumentFile:
      description: A file of a document
      required:
        - id
        - name
        - scanStatus
        - contentType
        - sha256Checksum
        - createdDate
        - contentLength
        - links
      properties:
        id:
          type: string
          description: The ID of the document file
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: File original name
          example: IMG20200101.jpg
        contentType:
          $ref: '#/components/schemas/FileContentTypeEnum'
        sha256Checksum:
          type: string
          description: SHA256 Checksum of file content
        contentLength:
          type: number
          description: Content length in bytes of the file
        createdDate:
          type: string
          format: date-time
          description: Date the document file was created
          example: '2020-01-01T01:01:01Z'
        scanStatus:
          type: string
          description: AV status of the files
          example: Unscanned
        links:
          $ref: '#/components/schemas/Links'
        isMultipageDocument:
          type: boolean
          description: Signifies whether or not this document was assembled as a pdf of multiple uploaded files.
        pdf:
          type: string
          description: The presigned url for downloading the assembled pdf document.
          example: 'https://s3bucketname.aws.com/path/to/pdf/file.pdf'
        pdfThumbnail:
          type: string
          description: The presigned url for downloading the assembled pdf document's thumbnail.
          example: 'https://s3bucketname.aws.com/path/to/pdf/file.png'
      type: object
    Document:
      description: A document
      required:
        - id
        - name
        - status
        - description
        - createdDate
        - scanStatus
        - files
        - links
      properties:
        id:
          type: string
          description: The ID of the document
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: Document name (system or user provided)
          example: Sam's SSN
        status:
          type: string
          description: Document status
          example: active
        description:
          type: string
          nullable: true
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
        scanStatus:
          type: string
          description: AV status of the files
          example: Unscanned
        createdDate:
          type: string
          description: Date the document was created
          format: date-time
          example: '2020-01-01T01:01:01Z'
        files:
          type: array
          description: The files in the document
          items:
            $ref: '#/components/schemas/DocumentFile'
        links:
          $ref: '#/components/schemas/Links'
        isMultipageDocument:
          type: boolean
          description: Signifies whether or not this document was assembled as a pdf of multiple uploaded files.
        pdf:
          type: string
          description: The presigned url for downloading the assembled pdf document.
          example: 'https://s3bucketname.aws.com/path/to/pdf/file.pdf'
        pdfThumbnail:
          type: string
          description: The presigned url for downloading the assembled pdf document's thumbnail.
          example: 'https://s3bucketname.aws.com/path/to/pdf/file.png'
      type: object
    FileDownloadDispositionTypeEnum:
      description: The disposition type for the file download
      type: string
      enum:
        - inline
        - attachment
      example: attachment
    FileDownload:
      description: A result containing a download link to a file
      type: object
      nullable: true
      required:
        - href
      properties:
        href:
          type: string
          description: The web address (relative or absolute) for the linked resource
          example: 'https://my-download-link.com'
    Owner:
      description: A record owner
      required:
        - id
        - givenName
        - familyName
        - name
        - dob
        - dhsCaseNumber
        - locale
      properties:
        id:
          type: string
          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64
          description: The user id
        givenName:
          type: string
          nullable: true
          example: Sam
          description: The users given name
        familyName:
          type: string
          nullable: true
          description: The users family name
          example: Citizen
        name:
          type: string
          description: The users name or email address, if name not provided
          example: sam.citizen@example.com
        dob:
          type: string
          description: Date of birth in format 'mm/dd/yyyy'
          example: 05/10/2022 (to represent May 10th, 2022)
        dhsCaseNumber:
          type: string
          description: The issued DHS Case Number for this user
          example: 
        locale:
          type: string
          description: Locale for the user
          example: 
      type: object
    PatchUserData:
      description: Edit user data
      required:
        - familyName
        - givenName
        - dob
        - dhsCaseNumber
        - locale
      properties:
        familyName:
          type: string
          description: A person's last name
          example: Smith, Johnson, etc
        givenName:
          type: string
          description: A person's first name
          example: Bill, Nancy, etc
        dob:
          type: string
          description: Date of birth in format 'mm/dd/yyyy'
          example: 05/10/2022 (to represent May 10th, 2022)
        dhsCaseNumber:
          type: string
          description: The issued DHS Case Number for this user
          example: 
        locale:
          type: string
          description: Locale of the user used for i18n
          example: 
      type: object
    RegistrationDetails:
      description: User registration information
      required:
        - familyName
        - givenName
        - dob
        - dhsCaseNumber
        - locale
      properties:
        familyName:
          type: string
          description: A person's last name
          example: Smith, Johnson, etc
        givenName:
          type: string
          description: A person's first name
          example: Bill, Nancy, etc
        dob:
          type: string
          description: Date of birth in format 'mm/dd/yyyy'
          example: 05/10/2022 (to represent May 10th, 2022)
        dhsCaseNumber:
          type: string
          description: The issued DHS Case Number for this user
          example: 
        locale:
          type: string
          description: Locale for the user
          example: 
      type: object
    Sharer:
      description: A user who shared information
      required:
        - id
        - email
        - name
      properties:
        id:
          type: string
          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64
          description: The user id
        email:
          type: string
          nullable: true
          description: The users email address
          example: sam.citizen@example.com
        name:
          type: string
          description: The users name or email address, if name not provided
          example: sam.citizen@example.com
      type: object
    ShareInformation:
      description: Information on how data was shared
      required:
        - sharedBy
        - sharedDate
      properties:
        sharedBy:
          $ref: '#/components/schemas/Sharer'
        sharedDate:
          type: string
          description: The date the access delegation was added
          format: date-time
          example: '2020-01-01T01:01:01Z'
      type: object
    User:
      description: A user
      required:
        - id
        - givenName
        - familyName
        - dob
        - dhsCaseNumber
        - locale
        - email
        - name
        - links
      properties:
        id:
          type: string
          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64
          description: The user id
        givenName:
          type: string
          nullable: true
          example: Sam
          description: The users given name
        familyName:
          type: string
          nullable: true
          description: The users family name
          example: Citizen
        dob:
          type: string
          description: Date of birth in format 'mm/dd/yyyy'
          example: 05/10/2022 (to represent May 10th, 2022)
        dhsCaseNumber:
          type: string
          description: The issued DHS Case Number for this user
          example: 
        locale:
          type: string
          description: Locale for the user
          example: 
        termsOfUseAccepted:
          type: boolean
          description: Whether the terms of use have been accepted for the current user for this application
          example: false
        email:
          type: string
          nullable: true
          description: The users email address
          example: sam.citizen@example.com
        name:
          type: string
          description: The users name or email address, if name not provided
          example: sam.citizen@example.com
        links:
          $ref: '#/components/schemas/Links'
      type: object
    UserDelegatedAccessList:
      description: A result containing the delagated access information for a user account
      required:
        - delegatedAccess
      properties:
        delegatedAccess:
          type: array
          description: The list of delegated access to the account
          items:
            $ref: '#/components/schemas/UserDelegatedAccess'
      type: object
    UserDelegatedAccess:
      description: Delegated access to a user account
      required:
        - id
        - email
        - createdDate
        - status
        - links
      properties:
        id:
          type: string
          description: The ID for the delegated access
          example: BC9115B9-B1E2-41AA-ACF4-F5908E2FB09B
        email:
          type: string
          description: The email of the user to delegate access to
          example: inviteduser@example.com
        allowsAccessToUser:
          $ref: '#/components/schemas/Owner'
        createdDate:
          type: string
          description: The date the access delegation was added
          format: date-time
          example: '2020-01-01T01:01:01Z'
        status:
          $ref: '#/components/schemas/UserDelegatedAccessStatus'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    UserDelegatedAccessStatus:
      description: The statuses a delegated access record can be in
      type: string
      enum:
        - INVITATION_SENT
        - INVITATION_EXPIRED
        - ACTIVE
      example: ACTIVE
    UserDelegatedAccessCreate:
      description: Request data to create delegated access to a user account
      required:
        - email
      properties:
        email:
          type: string
          description: The email of the user to delegate access to
          example: inviteduser@example.com
      type: object
    CollectionGrantType:
      description: The valid types for access grants to a collection
      type: string
      enum:
        - INDIVIDUAL_EMAIL
      example: INDIVIDUAL_EMAIL
    CollectionGrantList:
      description: A result containing a list of access grants to a document
      required:
        - collectionGrants
      properties:
        collectionGrants:
          type: array
          description: The list of grants for a collection
          items:
            $ref: '#/components/schemas/CollectionGrant'
      type: object
    CollectionGrant:
      description: A collection access grant
      required:
        - id
        - type
        - createdDate
        - links
        - individualEmailAddress
      properties:
        id:
          type: string
          example: 0693772D-5AED-4955-A6B5-41D1246E54AC
          description: The ID of the grant
        type:
          $ref: '#/components/schemas/CollectionGrantType'
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the grant was created
        individualEmailAddress:
          description: The email address that has been granted access
          type: string
        links:
          $ref: '#/components/schemas/Links'
      type: object
    CollectionList:
      type: object
      description: A result containing a list of collections
      required:
        - collections
      properties:
        collections:
          type: array
          description: The collections list
          items:
            $ref: '#/components/schemas/CollectionListItem'
    SharedDocumentsList:
      type: object
      description: A result containing a list of shared documents
      required:
        - sharedDocuments
      properties:
        sharedDocuments:
          type: array
          description: The documents list
          items:
            $ref: '#/components/schemas/SharedDocumentsListItem'
    SharedDocumentsListItem:
      type: object
      description: Details for listing a shared document
      required:
        - latestShareInformation
        - document
      properties:
        latestShareInformation:
          $ref: '#/components/schemas/ShareInformation'
        document:
          $ref: '#/components/schemas/DocumentListItem'
    SharedCollectionList:
      type: object
      description: A result containing a list of shared collections
      required:
        - sharedCollections
      properties:
        sharedCollections:
          type: array
          description: The collections list
          items:
            $ref: '#/components/schemas/SharedCollectionListItem'
    SharedCollectionListItem:
      type: object
      description: Basic details for listing a shared collection
      required:
        - owner
        - shareInformation
        - collection
      properties:
        owner:
          $ref: '#/components/schemas/Owner'
        shareInformation:
          $ref: '#/components/schemas/ShareInformation'
        collection:
          $ref: '#/components/schemas/CollectionListItem'
    CollectionListItem:
      type: object
      description: Basic details for listing a collection
      required:
        - id
        - name
        - status
        - createdDate
        - links
      properties:
        id:
          type: string
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
          description: The ID of the collection
        name:
          type: string
          example: Housing application
          description: The name of the collection
        status:
          type: string
          example: active
          description: Status of the collection
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the collection was created
        links:
          $ref: '#/components/schemas/Links'
        numberOfDocuments:
          type: number
          example: 4
          description: The number of documents contained in the collection.
    Collection:
      type: object
      description: A collection of documents
      required:
        - id
        - name
        - createdDate
        - links
        - status
      properties:
        id:
          type: string
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
          description: The ID of the collection
        name:
          type: string
          example: Housing application
          description: The name of the collection
        status:
          type: string
          example: active
          description: Status of the collection
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the collection was created
        links:
          $ref: '#/components/schemas/Links'
        numberOfDocuments:
          type: number
          example: 4
          description: The number of documents contained in the collection.
    CollectionCreate:
      type: object
      description: Request data to create a collection
      required:
        - name
        - documentIds
        - individualEmailAddresses
      properties:
        name:
          type: string
          example: Housing application
          description: The name of the collection
        documentIds:
          type: array
          description: The ID's of the Documents to add to this collection
          items:
            type: string
        individualEmailAddresses:
          type: array
          description: The email addresses of individuals to grant access to this collection
          items:
            type: string
    DocumentsDownloadCreate:
      type: object
      description: Request data to create a download of a set of documents
      required:
        - format
      properties:
        format:
          $ref: '#/components/schemas/DocumentsDownloadFormatEnum'
    CollectionStatusPatch:
      type: object
      description: Request data to create a collection
      required:
        - status
      properties:
        status:
          type: string
          example: pending
          description: Status/state of the collection
    DocumentsDownloadFormatEnum:
      description: The valid formats for a requested download
      type: string
      enum:
        - ZIP
      example: ZIP
    DocumentsDownloadStatusEnum:
      description: The valid statuses for a requested download
      type: string
      enum:
        - SUCCESS
        - PENDING
      example: SUCCESS
    DocumentsDownload:
      type: object
      description: Details about a document download
      required:
        - id
        - status
        - fileDownload
      properties:
        id:
          type: string
          description: The ID of the download
        status:
          $ref: '#/components/schemas/DocumentsDownloadStatusEnum'
        fileDownload:
          $ref: '#/components/schemas/FileDownload'
    ActivityList:
      type: object
      description: A list of account activity
      required:
        - activity
        - nextToken
      properties:
        activity:
          type: array
          description: The list of account activity
          items:
            $ref: '#/components/schemas/Activity'
        nextToken:
          type: string
          nullable: true
          description: The token to use to fetch further account activity
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
    ActivityActionTypeEnum:
      description: The type of an activity action
      type: string
      enum:
        - COLLECTION.CREATED
        - DOCUMENT.CREATED
        - DOCUMENT.ACCESSED
        - DOCUMENT.EDITED
        - DOCUMENT.DELETED
        - DELEGATEDUSER.INVITED
        - DELEGATEDUSER.INVITE_ACCEPTED
        - DELEGATEDUSER.DELETED
        - USER.TERMS_ACCEPTED
      example: COLLECTION.CREATED
    ActivityResourceTypeEnum:
      description: The type of an activity resource
      type: string
      enum:
        - COLLECTION
        - COLLECTION.INDIVIDUAL_EMAIL_GRANT
        - DOCUMENT
        - DOCUMENT.FILE
        - DELEGATEDUSER
        - USER
      example: COLLECTION
    ActivityResourceChange:
      type: object
      description: Changes made to a resource
      required:
        - field
        - oldValue
        - newValue
      properties:
        field:
          type: string
          description: The name of the field that was change
          example: description
        oldValue:
          type: string
          nullable: true
          description: The value of the field before the change
          example: Contains a picture of my social security card
        newValue:
          type: string
          nullable: true
          description: The value of the field after the change
          example: Contains a picture of my SSN
    ActivityResource:
      type: object
      description: A resource (or record) related to an activity
      required:
        - id
        - name
        - type
      properties:
        id:
          type: string
          description: The ID of the resource
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: The name of the resource, at the time of the activity, for human readable reference.
          example: Housing application
        type:
          $ref: '#/components/schemas/ActivityResourceTypeEnum'
        changes:
          type: array
          description: The list of any changes made to the resource
          items:
            $ref: '#/components/schemas/ActivityResourceChange'
    ActivityPrincipal:
      type: object
      description: Details on the user principal that performed the activity
      required:
        - id
        - name
      properties:
        id:
          type: string
          description: The ID of the principal
          example: d537795d-3b76-4188-9e77-fdd5e9bfe218
        name:
          type: string
          description: The consistent name of the principal, generally the user email, for human readable reference.
          example: inviteduser@example.com
    Activity:
      type: object
      description: An activity item
      required:
        - principal
        - type
        - requestId
        - date
        - resource
      properties:
        principal:
          $ref: '#/components/schemas/ActivityPrincipal'
        type:
          $ref: '#/components/schemas/ActivityActionTypeEnum'
        requestId:
          type: string
          description: The ID of the request that created this action
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        date:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the activity happened
        resource:
          $ref: '#/components/schemas/ActivityResource'
        relatedResources:
          type: array
          description: The list of any additional resources part of this activity
          items:
            $ref: '#/components/schemas/ActivityResource'

  securitySchemes:
    datalocker_auth:
      type: oauth2
      description: Example only. Scope is only defined here to distinguish between Agent access and Client access
      flows:
        authorizationCode:
          authorizationUrl: 'https://example-auth-server.com/oauth/authorize'
          tokenUrl: 'https://example-auth-server.com/oauth/tokens'
          scopes:
            'agent': has access to agent portal
