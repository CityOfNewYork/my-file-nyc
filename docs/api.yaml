openapi: 3.0.2
servers:
  - url: /v1/
info:
  description: |-
    This documents the API for the New America Data Locker project.
  version: 1.0.0
  title: Data Locker
tags:
  - name: user
    description: User based operations
  - name: document
    description: Document based operations
  - name: collections
    description: Collection based operations
paths:
  '/users/{userId}/documents':
    get:
      tags:
        - user
      summary: List documents owned by a user
      description: List documents owned by a user
      operationId: listUserDocuments
      parameters:
        - name: userId
          in: path
          description: ID of user to find documents for
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Search string to narrow down list
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add a new document
      description: Add a new document for a user
      operationId: addUserDocument
      parameters:
        - name: userId
          in: path
          description: ID of user to create document for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Create a new document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentCreate'

  '/users/{userId}':
    get:
      tags:
        - user
      summary: Get user
      description: Get user details
      operationId: getUser
      parameters:
        - name: userId
          in: path
          description: ID of user to find
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          description: User not found
      security:
        - datalocker_auth: []

  '/users/{userId}/delegates':
    get:
      tags:
        - user
      summary: List delegated access
      description: List access delegated to and from a user
      operationId: listDelegatedAccess
      parameters:
        - name: userId
          in: path
          description: ID of user to find delegated access items for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDelegatedAccessList'
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add delegated access
      description: Add delegated access to a user for current user
      operationId: addDelegatedAccess
      parameters:
        - name: userId
          in: path
          description: ID of user to delegate access for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDelegatedAccess'
        '404':
          description: User not found
      requestBody:
        description: Create a new delegated access
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDelegatedAccessCreate'
      security:
        - datalocker_auth: []

  '/users/{userId}/collections':
    get:
      tags:
        - user
      summary: List collections owned by a user
      description: List collections owned by a user
      operationId: listUserCollections
      parameters:
        - name: userId
          in: path
          description: ID of user to find collections for
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Search string to narrow down list
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []
    post:
      tags:
        - user
      summary: Add a new collection
      description: Add a new collection for a user
      operationId: addUserCollection
      parameters:
        - name: userId
          in: path
          description: ID of user to create the collection for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Collection'
        '400':
          description: Bad Request
      security:
        - datalocker_auth: []
      requestBody:
        description: Create a new collection
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionCreate'

  '/users/{userId}/collections/shared':
    get:
      tags:
        - user
      summary: List collections shared to user
      description: List collections shared to user
      operationId: listUserCollectionsShared
      parameters:
        - name: userId
          in: path
          description: ID of user to find accessible collections for
          required: true
          schema:
            type: string
        - name: search
          in: query
          description: Search string to narrow down list
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []

  '/documents/{documentId}':
    get:
      tags:
        - document
      summary: Find document by ID
      description: Returns a single document. This will be audited as a document view by the current user
      operationId: getDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of document to return
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Document'
        '400':
          description: Invalid ID supplied
        '404':
          description: Document not found
      security:
        - datalocker_auth: []
    put:
      tags:
        - document
      summary: Updates an existing document
      description: ''
      operationId: updateDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of the document that needs to be updated
          required: true
          schema:
            type: string
      responses:
        '405':
          description: Invalid input
      security:
        - datalocker_auth: []
      requestBody:
        description: Updates a document
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentUpdate'
    delete:
      tags:
        - document
      summary: Deletes a document
      description: ''
      operationId: deleteDocumentById
      parameters:
        - name: documentId
          in: path
          description: ID of Document to delete
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Document not found
      security:
        - datalocker_auth: []

  '/documents/{documentId}/files/{fileId}/download':
    get:
      tags:
        - document
      summary: File download information
      description: Get a presigned POST URL to download the specified file. This will be audited as a download by the end user.
      operationId: downloadDocumentFileById
      parameters:
        - name: documentId
          in: path
          description: ID of document
          required: true
          schema:
            type: string
        - name: fileId
          in: path
          description: ID of file in the document
          required: true
          schema:
            type: string
        - name: disposition
          in: query
          description: Content Disposition for the file download. Will default to attachment if none given.
          required: false
          schema:
            $ref: '#/components/schemas/FileDownloadDispositionTypeEnum'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDownload'
        '400':
          description: Invalid ID supplied
        '404':
          description: Document or file not found
      security:
        - datalocker_auth: []

  '/collections/{collectionId}/grants':
    get:
      tags:
        - collections
      summary: Get access grants to collection
      description: Returns access grants for a single collection
      operationId: getGrantsByCollectionId
      parameters:
        - name: collectionId
          in: path
          description: ID of collection to find grants for
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CollectionGrantList'
        '400':
          description: Invalid ID supplied
        '404':
          description: Collection not found
      security:
        - datalocker_auth: []
    post:
      tags:
        - collections
      summary: Create grants to a collection
      description: Grant access to a collection
      operationId: createGrantsForCollection
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
        '405':
          description: Invalid input
      security:
        - datalocker_auth: []
      requestBody:
        description: Create a document grant
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CollectionGrantCreate'

  '/collection/{collectionId}/grants/{grantId}':
    delete:
      tags:
        - collections
      summary: Deletes a collection grant
      description: Revokes access to a collection by removing the grant
      operationId: deleteCollectionGrantById
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection the grant belongs to
          required: true
          schema:
            type: string
        - name: grantId
          in: path
          description: ID of the grant to delete
          required: true
          schema:
            type: string
      responses:
        '404':
          description: Collection not found
      security:
        - datalocker_auth: []

  '/collections/{collectionId}/documents':
    get:
      tags:
        - collections
      summary: Get documents
      description: Get documents in a collection
      operationId: getCollectionDocuments
      parameters:
        - name: collectionId
          in: path
          description: ID of the collection to fetch
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentList'
        '404':
          description: User not found
      security:
        - datalocker_auth: []

components:
  schemas:
    Link:
      description: A HATEOS Link
      type: object
      required:
        - href
        - rel
        - type
      properties:
        href:
          type: string
          description: The web address (relative or absolute) for the linked resource
          example: 'https://my-doc-link.com'
        rel:
          type: string
          description: The relation this linked resource has to the resource it is attached to.
          example: 'parent'
        type:
          type: string
          description: The HTTP method to use to access the linked resource
          example: GET
        includeFormData:
          type: object
          description: Form data to include in the request
          additionalProperties:
            type: string
    Links:
      description: An array of Links
      type: array
      items:
        $ref: '#/components/schemas/Link'
    FileContentTypeEnum:
      description: The accepted content type for files
      type: string
      enum:
        - application/pdf
        - image/jpeg
        - image/png
        - image/tiff
      example: image/jpeg
    DocumentUpdate:
      description: Request data to update a document
      type: object
      properties:
        name:
          type: string
          description: Document name.
          example: Sam's SSN
        description:
          type: string
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
    DocumentCreate:
      description: Request data to create a document
      required:
        - name
        - files
      properties:
        name:
          type: string
          description: Document name (system or user provided)
          example: Sam's SSN
        description:
          type: string
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
        files:
          type: array
          description: The files that are part of the document
          items:
            $ref: '#/components/schemas/DocumentCreateFile'
      type: object
    DocumentCreateFile:
      description: Request data to create a file of a document
      required:
        - name
        - contentType
        - sha256Checksum
        - contentLength
      properties:
        name:
          type: string
          description: File original name
          example: IMG20200101.jpg
        contentType:
          $ref: '#/components/schemas/FileContentTypeEnum'
        sha256Checksum:
          type: string
          description: SHA256 Checksum of file content
        contentLength:
          type: number
          description: Content length in bytes of the file
      type: object
    DocumentList:
      description: A result containing a list of documents
      required:
        - documents
      properties:
        documents:
          type: array
          description: The documents list
          items:
            $ref: '#/components/schemas/DocumentListItem'
      type: object
    DocumentListItem:
      description: A listed document, deliberately minimal
      required:
        - id
        - name
        - createdDate
        - links
      properties:
        id:
          type: string
          description: The ID of the document
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: The human readable name of the document
          example: Letter of Employment
        createdDate:
          type: string
          description: Date the document was created
          format: date-time
          example: '2020-01-01T01:01:01Z'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    DocumentFile:
      description: A file of a document
      required:
        - id
        - name
        - contentType
        - sha256Checksum
        - createdDate
        - contentLength
        - links
      properties:
        id:
          type: string
          description: The ID of the document file
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: File original name
          example: IMG20200101.jpg
        contentType:
          $ref: '#/components/schemas/FileContentTypeEnum'
        sha256Checksum:
          type: string
          description: SHA256 Checksum of file content
        contentLength:
          type: number
          description: Content length in bytes of the file
        createdDate:
          type: string
          format: date-time
          description: Date the document file was created
          example: '2020-01-01T01:01:01Z'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    Document:
      description: A document
      required:
        - id
        - name
        - createdDate
        - files
        - links
      properties:
        id:
          type: string
          description: The ID of the document
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
        name:
          type: string
          description: Document name (system or user provided)
          example: Sam's SSN
        description:
          type: string
          description: Document description or notes
          example: Saved with help of my case manager, Charlie :)
        createdDate:
          type: string
          description: Date the document was created
          format: date-time
          example: '2020-01-01T01:01:01Z'
        files:
          type: array
          description: The files in the document
          items:
            $ref: '#/components/schemas/DocumentFile'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    FileDownloadDispositionTypeEnum:
      description: The disposition type for the file download
      type: string
      enum:
        - inline
        - attachment
      example: attachment
    FileDownload:
      description: A result containing a download link to a file
      type: object
      required:
        - href
      properties:
        href:
          type: string
          description: The web address (relative or absolute) for the linked resource
          example: 'https://my-download-link.com'
    User:
      description: A user
      required:
        - id
        - givenName
        - familyName
        - links
      properties:
        id:
          type: string
          example: 2D3D5CF7-ED9D-48F1-8A14-12B0C1114B64
          description: The user id
        givenName:
          type: string
          example: Sam
          description: The users given name
        familyName:
          type: string
          description: The users family name
          example: Citizen
        links:
          $ref: '#/components/schemas/Links'
      type: object
    UserDelegatedAccessList:
      description: A result containing the delagated access information for a user account
      required:
        - delegatedAccess
      properties:
        delegatedAccess:
          type: array
          description: The list of delegated access to the account
          items:
            $ref: '#/components/schemas/UserDelegatedAccess'
      type: object
    UserDelegatedAccess:
      description: Delegated access to a user account
      required:
        - email
        - createdDate
        - links
      properties:
        email:
          type: string
          description: The email of the user to delegate access to
          example: inviteduser@example.com
        allowsAccessToUser:
          $ref: '#/components/schemas/User'
        createdDate:
          type: string
          description: The date the access delegation was added
          format: date-time
          example: '2020-01-01T01:01:01Z'
        links:
          $ref: '#/components/schemas/Links'
      type: object
    UserDelegatedAccessCreate:
      description: Request data to create delegated access to a user account
      required:
        - email
      properties:
        email:
          type: string
          description: The email of the user to delegate access to
          example: inviteduser@example.com
      type: object
    CollectionGrantType:
      description: The valid types for access grants to a collection
      type: string
      enum:
        - INDIVIDUAL_EMAIL
      example: INDIVIDUAL_EMAIL
    CollectionGrantCreate:
      description: Request data to create an access grant to a collection
      required:
        - individualEmailAddresses
      properties:
        individualEmailAddresses:
          type: array
          description: The email addresses of individuals to grant access to this collection
          items:
            type: string
      type: object
    CollectionGrantList:
      description: A result containing a list of access grants to a document
      required:
        - collectionGrants
      properties:
        collectionGrants:
          type: array
          description: The list of grants for a collection
          items:
            $ref: '#/components/schemas/CollectionGrant'
      type: object
    CollectionGrant:
      description: A collection access grant
      required:
        - id
        - type
        - createdDate
        - links
        - individualEmailAddress
      properties:
        id:
          type: string
          example: 0693772D-5AED-4955-A6B5-41D1246E54AC
          description: The ID of the grant
        type:
          $ref: '#/components/schemas/CollectionGrantType'
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the grant was created
        individualEmailAddress:
          description: The email address that has been granted access
          type: string
        links:
          $ref: '#/components/schemas/Links'
      type: object
    CollectionList:
      type: object
      description: A result containing a list of collections
      required:
        - collections
      properties:
        collections:
          type: array
          description: The collections list
          items:
            $ref: '#/components/schemas/CollectionListItem'
    CollectionListItem:
      type: object
      description: Basic details for listing a collection
      required:
        - id
        - name
        - createdDate
      properties:
        id:
          type: string
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
          description: The ID of the collection
        name:
          type: string
          example: Housing application
          description: The name of the collection
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the collection was created
        links:
          $ref: '#/components/schemas/Links'
    Collection:
      type: object
      description: A collection of documents
      required:
        - id
        - name
        - createdDate
      properties:
        id:
          type: string
          example: D050A33E-74F6-4BEF-AED5-87F48E5CCE44
          description: The ID of the collection
        name:
          type: string
          example: Housing application
          description: The name of the collection
        createdDate:
          type: string
          format: date-time
          example: '2020-01-01T01:01:01Z'
          description: The date the collection was created
        links:
          $ref: '#/components/schemas/Links'
    CollectionCreate:
      type: object
      description: Request data to create a collection
      required:
        - name
        - documentIds
        - individualEmailAddresses
      properties:
        name:
          type: string
          example: Housing application
          description: The name of the collection
        documentIds:
          type: array
          description: The ID's of the Documents to add to this collection
          items:
            type: string
        individualEmailAddresses:
          type: array
          description: The email addresses of individuals to grant access to this collection
          items:
            type: string

  securitySchemes:
    datalocker_auth:
      type: oauth2
      description: Example only. Scope is only defined here to distinguish between Agent access and Client access
      flows:
        authorizationCode:
          authorizationUrl: 'https://example-auth-server.com/oauth/authorize'
          tokenUrl: 'https://example-auth-server.com/oauth/tokens'
          scopes:
            'agent': has access to agent portal
